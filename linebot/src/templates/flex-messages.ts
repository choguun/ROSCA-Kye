import { 
  FlexMessage, 
  FlexBubble, 
  FlexBox,
  DepositReminderData,
  CircleStatusData,
  PayoutNotificationData,
  RiskAlertData,
  CelebrationData,
  WelcomeMessageData,
  HelpMenuData,
  URGENCY_COLORS,
  PHASE_COLORS,
  MESSAGE_ICONS
} from '@/types';
import { getWebAppUrls } from '@/utils/config';

export class FlexMessageBuilder {
  private webAppUrls = getWebAppUrls();

  /**
   * Create deposit reminder message
   */
  createDepositReminderMessage(data: DepositReminderData, language: string = 'ko'): FlexMessage {
    const colors = URGENCY_COLORS[data.urgency];
    const icon = MESSAGE_ICONS.deposit_reminder;

    const messages = {
      ko: {
        title: data.urgency === 'critical' ? '‚è∞ ÏµúÏ¢Ö ÏïåÎ¶º' : 'üí∞ ÏûÖÍ∏à ÏïåÎ¶º',
        timeRemaining: `ÎÇ®ÏùÄ ÏãúÍ∞Ñ: ${data.hoursRemaining}ÏãúÍ∞Ñ`,
        depositAmount: 'ÏûÖÍ∏àÏï°',
        latePenalty: 'Ïó∞Ï≤¥Î£å',
        actionButton: 'ÏßÄÍ∏à ÏûÖÍ∏àÌïòÍ∏∞',
        altText: `ÏûÖÍ∏à ÏïåÎ¶º: ${data.hoursRemaining}ÏãúÍ∞Ñ ÎÇ®Ïùå`
      },
      en: {
        title: data.urgency === 'critical' ? '‚è∞ FINAL REMINDER' : 'üí∞ Deposit Reminder',
        timeRemaining: `Time remaining: ${data.hoursRemaining} hours`,
        depositAmount: 'Deposit Amount',
        latePenalty: 'Late Penalty',
        actionButton: 'Make Deposit Now',
        altText: `Deposit reminder: ${data.hoursRemaining}h remaining`
      },
      ja: {
        title: data.urgency === 'critical' ? '‚è∞ ÊúÄÁµÇ„É™„Éû„Ç§„É≥„ÉÄ„Éº' : 'üí∞ ÂÖ•Èáë„É™„Éû„Ç§„É≥„ÉÄ„Éº',
        timeRemaining: `ÊÆã„ÇäÊôÇÈñì: ${data.hoursRemaining}ÊôÇÈñì`,
        depositAmount: 'ÂÖ•ÈáëÈ°ç',
        latePenalty: 'Âª∂ÊªûÊñô',
        actionButton: '‰ªä„Åô„ÅêÂÖ•Èáë',
        altText: `ÂÖ•Èáë„É™„Éû„Ç§„É≥„ÉÄ„Éº: ${data.hoursRemaining}ÊôÇÈñìÊÆã„Çä`
      }
    };

    const msg = messages[language as keyof typeof messages] || messages.en;
    const depositAmountUsdt = (parseInt(data.depositAmount) / 1000000).toFixed(2);
    const penaltyUsdt = data.penalty !== '0' ? (parseInt(data.penalty) / 1000000).toFixed(2) : '0';

    const bodyContents: any[] = [
      {
        type: 'text',
        text: msg.timeRemaining,
        size: 'lg',
        weight: 'bold',
        color: colors.primary
      },
      {
        type: 'separator',
        margin: 'md'
      },
      {
        type: 'box',
        layout: 'horizontal',
        contents: [
          {
            type: 'text',
            text: msg.depositAmount,
            flex: 1,
            color: '#666666'
          },
          {
            type: 'text',
            text: `${depositAmountUsdt} USDT`,
            flex: 1,
            weight: 'bold',
            align: 'end'
          }
        ],
        margin: 'md'
      }
    ];

    // Add penalty info if applicable
    if (data.penalty !== '0') {
      bodyContents.push({
        type: 'box',
        layout: 'horizontal',
        contents: [
          {
            type: 'text',
            text: msg.latePenalty,
            flex: 1,
            color: '#FF3333'
          },
          {
            type: 'text',
            text: `+${penaltyUsdt} USDT`,
            flex: 1,
            weight: 'bold',
            color: '#FF3333',
            align: 'end'
          }
        ],
        margin: 'sm'
      });
    }

    const bubble: FlexBubble = {
      type: 'bubble',
      size: 'mega',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'text',
          text: msg.title,
          weight: 'bold',
          color: data.urgency === 'critical' ? '#FFFFFF' : colors.text,
          size: 'md'
        }],
        backgroundColor: colors.primary,
        paddingAll: '20px'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: bodyContents,
        paddingAll: '20px'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'button',
          action: {
            type: 'uri',
            label: msg.actionButton,
            uri: `${this.webAppUrls.endpoints.deposit}&circle=${data.circleAddress}&round=${data.roundIndex}`
          },
          style: 'primary',
          color: colors.primary
        }],
        paddingAll: '20px'
      }
    };

    return {
      type: 'flex',
      altText: msg.altText,
      contents: bubble
    };
  }

  /**
   * Create circle status message
   */
  createCircleStatusMessage(data: CircleStatusData, language: string = 'ko'): FlexMessage {
    const colors = PHASE_COLORS[data.phase];
    const progress = data.totalRounds > 0 ? (data.currentRound / data.totalRounds) * 100 : 0;

    const messages = {
      ko: {
        title: 'üìä Í≥ÑÎ™®ÏûÑ ÌòÑÌô©',
        members: 'Î©§Î≤Ñ',
        round: 'ÎùºÏö¥Îìú',
        progress: 'ÏßÑÌñâÎ•†',
        nextDeadline: 'Îã§Ïùå ÎßàÍ∞ê',
        totalValue: 'Ï¥ù Í∞ÄÏπò',
        viewDetails: 'ÏûêÏÑ∏Ìûà Î≥¥Í∏∞',
        altText: `Í≥ÑÎ™®ÏûÑ ÌòÑÌô©: ${progress.toFixed(1)}% ÏôÑÎ£å`
      },
      en: {
        title: 'üìä Circle Status',
        members: 'Members',
        round: 'Round',
        progress: 'Progress',
        nextDeadline: 'Next Deadline',
        totalValue: 'Total Value',
        viewDetails: 'View Details',
        altText: `Circle status: ${progress.toFixed(1)}% complete`
      },
      ja: {
        title: 'üìä „Çµ„Éº„ÇØ„É´Áä∂Ê≥Å',
        members: '„É°„É≥„Éê„Éº',
        round: '„É©„Ç¶„É≥„Éâ',
        progress: 'ÈÄ≤Êçó',
        nextDeadline: 'Ê¨°„ÅÆÁ∑†Âàá',
        totalValue: 'Á∑è‰æ°ÂÄ§',
        viewDetails: 'Ë©≥Á¥∞„ÇíË¶ã„Çã',
        altText: `„Çµ„Éº„ÇØ„É´Áä∂Ê≥Å: ${progress.toFixed(1)}% ÂÆå‰∫Ü`
      }
    };

    const msg = messages[language as keyof typeof messages] || messages.en;
    const totalValueUsdt = (parseInt(data.totalValueLocked) / 1000000).toFixed(2);

    const bubble: FlexBubble = {
      type: 'bubble',
      size: 'mega',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'text',
          text: data.circleName,
          weight: 'bold',
          size: 'lg',
          color: '#FFFFFF'
        }, {
          type: 'text',
          text: msg.title,
          size: 'sm',
          color: '#FFFFFF',
          margin: 'xs'
        }],
        backgroundColor: colors.primary,
        paddingAll: '20px'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: msg.members,
                flex: 1,
                color: '#666666'
              },
              {
                type: 'text',
                text: `${data.memberCount}/${data.maxMembers}`,
                flex: 1,
                weight: 'bold',
                align: 'end'
              }
            ]
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: msg.round,
                flex: 1,
                color: '#666666'
              },
              {
                type: 'text',
                text: `${data.currentRound}/${data.totalRounds}`,
                flex: 1,
                weight: 'bold',
                align: 'end'
              }
            ],
            margin: 'md'
          },
          {
            type: 'box',
            layout: 'vertical',
            contents: [{
              type: 'box',
              layout: 'horizontal',
              contents: [{
                type: 'box',
                layout: 'vertical',
                flex: progress,
                backgroundColor: colors.primary,
                height: '6px',
                cornerRadius: '3px'
              }, {
                type: 'box',
                layout: 'vertical',
                flex: 100 - progress,
                backgroundColor: '#E0E0E0',
                height: '6px',
                cornerRadius: '3px'
              }]
            }],
            margin: 'md'
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: msg.progress,
                flex: 1,
                size: 'sm',
                color: '#666666'
              },
              {
                type: 'text',
                text: `${progress.toFixed(1)}%`,
                flex: 1,
                size: 'sm',
                align: 'end'
              }
            ],
            margin: 'sm'
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: msg.totalValue,
                flex: 1,
                color: '#666666'
              },
              {
                type: 'text',
                text: `${totalValueUsdt} USDT`,
                flex: 1,
                weight: 'bold',
                align: 'end'
              }
            ],
            margin: 'md'
          }
        ],
        paddingAll: '20px'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'button',
          action: {
            type: 'uri',
            label: msg.viewDetails,
            uri: `${this.webAppUrls.endpoints.dashboard}&circle=${data.circleAddress}`
          },
          style: 'secondary'
        }],
        paddingAll: '20px'
      }
    };

    return {
      type: 'flex',
      altText: msg.altText,
      contents: bubble
    };
  }

  /**
   * Create payout notification message
   */
  createPayoutNotificationMessage(data: PayoutNotificationData, language: string = 'ko'): FlexMessage {
    const messages = {
      ko: {
        title: 'üéâ ÏßÄÍ∏â ÏôÑÎ£å!',
        beneficiary: 'ÏàòÎ†πÏûê',
        amount: 'ÏßÄÍ∏âÏï°',
        roundComplete: `ÎùºÏö¥Îìú ${data.roundIndex} ÏôÑÎ£å`,
        nextRound: 'Îã§Ïùå ÎùºÏö¥Îìú',
        yieldEarned: 'ÏàòÏùµ',
        altText: `ÏßÄÍ∏â ÏôÑÎ£å: ${data.beneficiaryName}ÎãòÏù¥ ÏàòÎ†π`
      },
      en: {
        title: 'üéâ Payout Complete!',
        beneficiary: 'Beneficiary',
        amount: 'Amount',
        roundComplete: `Round ${data.roundIndex} Complete`,
        nextRound: 'Next Round',
        yieldEarned: 'Yield Earned',
        altText: `Payout complete: ${data.beneficiaryName} received payment`
      },
      ja: {
        title: 'üéâ ÊîØÊâï„ÅÑÂÆå‰∫ÜÔºÅ',
        beneficiary: 'ÂèóÁõäËÄÖ',
        amount: 'ÈáëÈ°ç',
        roundComplete: `„É©„Ç¶„É≥„Éâ ${data.roundIndex} ÂÆå‰∫Ü`,
        nextRound: 'Ê¨°„ÅÆ„É©„Ç¶„É≥„Éâ',
        yieldEarned: 'Âà©Âõû„Çä',
        altText: `ÊîØÊâï„ÅÑÂÆå‰∫Ü: ${data.beneficiaryName}„ÅåÂèóÈ†ò`
      }
    };

    const msg = messages[language as keyof typeof messages] || messages.en;
    const amountUsdt = (parseInt(data.amount) / 1000000).toFixed(2);
    const yieldUsdt = data.yieldEarned ? (parseInt(data.yieldEarned) / 1000000).toFixed(2) : '0';

    const bodyContents: any[] = [
      {
        type: 'text',
        text: msg.roundComplete,
        size: 'lg',
        weight: 'bold',
        color: '#00B900'
      },
      {
        type: 'separator',
        margin: 'md'
      },
      {
        type: 'box',
        layout: 'horizontal',
        contents: [
          {
            type: 'text',
            text: msg.beneficiary,
            flex: 1,
            color: '#666666'
          },
          {
            type: 'text',
            text: data.beneficiaryName,
            flex: 2,
            weight: 'bold',
            align: 'end'
          }
        ],
        margin: 'md'
      },
      {
        type: 'box',
        layout: 'horizontal',
        contents: [
          {
            type: 'text',
            text: msg.amount,
            flex: 1,
            color: '#666666'
          },
          {
            type: 'text',
            text: `${amountUsdt} USDT`,
            flex: 2,
            weight: 'bold',
            align: 'end'
          }
        ],
        margin: 'sm'
      }
    ];

    // Add yield info if applicable
    if (data.yieldEarned && yieldUsdt !== '0') {
      bodyContents.push({
        type: 'box',
        layout: 'horizontal',
        contents: [
          {
            type: 'text',
            text: msg.yieldEarned,
            flex: 1,
            color: '#00B900'
          },
          {
            type: 'text',
            text: `+${yieldUsdt} USDT`,
            flex: 2,
            weight: 'bold',
            color: '#00B900',
            align: 'end'
          }
        ],
        margin: 'sm'
      });
    }

    const bubble: FlexBubble = {
      type: 'bubble',
      size: 'mega',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'text',
          text: msg.title,
          weight: 'bold',
          color: '#FFFFFF',
          size: 'md'
        }],
        backgroundColor: '#00B900',
        paddingAll: '20px'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: bodyContents,
        paddingAll: '20px'
      }
    };

    return {
      type: 'flex',
      altText: msg.altText,
      contents: bubble
    };
  }

  /**
   * Create risk alert message
   */
  createRiskAlertMessage(data: RiskAlertData, language: string = 'ko'): FlexMessage {
    const messages = {
      ko: {
        title: 'üö® ÏúÑÌóò ÏïåÎ¶º',
        issue: 'Î¨∏Ï†ú',
        recommendations: 'Í∂åÏû• Ï°∞Ïπò',
        getHelp: 'ÎèÑÏõÄ Î∞õÍ∏∞',
        altText: `ÏúÑÌóò ÏïåÎ¶º: ${data.riskLevel} ÏàòÏ§Ä`
      },
      en: {
        title: 'üö® Risk Alert',
        issue: 'Issue',
        recommendations: 'Recommended Actions',
        getHelp: 'Get Help',
        altText: `Risk alert: ${data.riskLevel} level`
      },
      ja: {
        title: 'üö® „É™„Çπ„ÇØË≠¶Âëä',
        issue: 'ÂïèÈ°å',
        recommendations: 'Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥',
        getHelp: '„Éò„É´„Éó„ÇíÂèó„Åë„Çã',
        altText: `„É™„Çπ„ÇØË≠¶Âëä: ${data.riskLevel} „É¨„Éô„É´`
      }
    };

    const msg = messages[language as keyof typeof messages] || messages.en;
    const riskColors = {
      medium: '#FF9500',
      high: '#FF6B35',
      critical: '#FF3333'
    };

    const bubble: FlexBubble = {
      type: 'bubble',
      size: 'mega',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'text',
          text: msg.title,
          weight: 'bold',
          color: '#FFFFFF',
          size: 'md'
        }],
        backgroundColor: riskColors[data.riskLevel],
        paddingAll: '20px'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: msg.recommendations,
            weight: 'bold',
            margin: 'md'
          },
          ...data.recommendedActions.map(action => ({
            type: 'text',
            text: `‚Ä¢ ${action}`,
            size: 'sm',
            margin: 'xs',
            wrap: true
          }))
        ],
        paddingAll: '20px'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'button',
          action: {
            type: 'postback',
            label: msg.getHelp,
            data: JSON.stringify({
              action: 'get_help',
              riskLevel: data.riskLevel,
              issueType: data.issueType
            })
          },
          style: 'primary',
          color: riskColors[data.riskLevel]
        }],
        paddingAll: '20px'
      }
    };

    return {
      type: 'flex',
      altText: msg.altText,
      contents: bubble
    };
  }

  /**
   * Create celebration message
   */
  createCelebrationMessage(data: CelebrationData, language: string = 'ko'): FlexMessage {
    const messages = {
      ko: {
        altText: `Ï∂ïÌïòÌï©ÎãàÎã§: ${data.title}`
      },
      en: {
        altText: `Celebration: ${data.title}`
      },
      ja: {
        altText: `„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô: ${data.title}`
      }
    };

    const msg = messages[language as keyof typeof messages] || messages.en;

    const bubble: FlexBubble = {
      type: 'bubble',
      size: 'mega',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'text',
          text: MESSAGE_ICONS.celebration + ' ' + data.title,
          weight: 'bold',
          color: '#FFFFFF',
          size: 'lg'
        }],
        backgroundColor: '#4A90E2',
        paddingAll: '20px'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'text',
          text: data.description,
          wrap: true,
          color: '#333333'
        }],
        paddingAll: '20px'
      }
    };

    return {
      type: 'flex',
      altText: msg.altText,
      contents: bubble
    };
  }

  /**
   * Create welcome message
   */
  createWelcomeMessage(data: WelcomeMessageData, language: string = 'ko'): FlexMessage {
    const messages = {
      ko: {
        title: `ÏïàÎÖïÌïòÏÑ∏Ïöî, ${data.userName}Îãò!`,
        subtitle: 'Í≥ÑÎ™®ÏûÑ Î¥áÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§',
        getStarted: 'ÏãúÏûëÌïòÍ∏∞',
        altText: `ÌôòÏòÅÌï©ÎãàÎã§, ${data.userName}Îãò!`
      },
      en: {
        title: `Hello, ${data.userName}!`,
        subtitle: 'Welcome to the Kye Circle Bot',
        getStarted: 'Get Started',
        altText: `Welcome, ${data.userName}!`
      },
      ja: {
        title: `„Åì„Çì„Å´„Å°„ÅØ, ${data.userName}„Åï„Çì!`,
        subtitle: 'Kye„Çµ„Éº„ÇØ„É´„Éú„ÉÉ„Éà„Å∏„Çà„ÅÜ„Åì„Åù',
        getStarted: 'ÈñãÂßã„Åô„Çã',
        altText: `„Çà„ÅÜ„Åì„Åù, ${data.userName}„Åï„Çì!`
      }
    };

    const msg = messages[language as keyof typeof messages] || messages.en;

    const actionButtons = data.suggestedActions.slice(0, 3).map(action => ({
      type: 'button',
      action: {
        type: action.actionUrl ? 'uri' : 'postback',
        label: action.title,
        ...(action.actionUrl ? { uri: action.actionUrl } : { data: JSON.stringify({ action: action.actionType }) })
      },
      style: 'primary',
      margin: 'sm'
    }));

    const bubble: FlexBubble = {
      type: 'bubble',
      size: 'mega',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'text',
          text: msg.title,
          weight: 'bold',
          color: '#FFFFFF',
          size: 'lg'
        }, {
          type: 'text',
          text: msg.subtitle,
          color: '#FFFFFF',
          size: 'sm',
          margin: 'xs'
        }],
        backgroundColor: '#00B900',
        paddingAll: '20px'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: actionButtons,
        paddingAll: '20px'
      }
    };

    return {
      type: 'flex',
      altText: msg.altText,
      contents: bubble
    };
  }

  /**
   * Create help menu message
   */
  createHelpMenuMessage(data: HelpMenuData, language: string = 'ko'): FlexMessage {
    const messages = {
      ko: {
        title: '‚ùì ÎèÑÏõÄÎßê Î©îÎâ¥',
        commonQuestions: 'ÏûêÏ£º Î¨ªÎäî ÏßàÎ¨∏',
        quickActions: 'Îπ†Î•∏ ÎèôÏûë',
        altText: 'ÎèÑÏõÄÎßê Î©îÎâ¥'
      },
      en: {
        title: '‚ùì Help Menu',
        commonQuestions: 'Common Questions',
        quickActions: 'Quick Actions',
        altText: 'Help Menu'
      },
      ja: {
        title: '‚ùì „Éò„É´„Éó„É°„Éã„É•„Éº',
        commonQuestions: '„Çà„Åè„ÅÇ„ÇãË≥™Âïè',
        quickActions: '„ÇØ„Ç§„ÉÉ„ÇØ„Ç¢„ÇØ„Ç∑„Éß„É≥',
        altText: '„Éò„É´„Éó„É°„Éã„É•„Éº'
      }
    };

    const msg = messages[language as keyof typeof messages] || messages.en;

    const questionItems = data.commonQuestions.slice(0, 4).map(q => ({
      type: 'text',
      text: `‚Ä¢ ${q.question}`,
      size: 'sm',
      color: '#4A90E2',
      margin: 'xs',
      action: {
        type: 'postback',
        data: JSON.stringify({
          action: 'help_answer',
          question: q.question,
          answer: q.answer
        })
      }
    }));

    const actionButtons = data.quickActions.slice(0, 2).map(action => ({
      type: 'button',
      action: {
        type: 'postback',
        label: action.label,
        data: action.data || JSON.stringify({ action: action.action })
      },
      style: 'secondary',
      margin: 'sm'
    }));

    const bubble: FlexBubble = {
      type: 'bubble',
      size: 'mega',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'text',
          text: msg.title,
          weight: 'bold',
          color: '#FFFFFF',
          size: 'md'
        }],
        backgroundColor: '#4A90E2',
        paddingAll: '20px'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: msg.commonQuestions,
            weight: 'bold',
            margin: 'none'
          },
          ...questionItems
        ],
        paddingAll: '20px'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: actionButtons,
        paddingAll: '20px'
      }
    };

    return {
      type: 'flex',
      altText: msg.altText,
      contents: bubble
    };
  }
}